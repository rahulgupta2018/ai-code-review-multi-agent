{
  "findings": [
    {
      "file": "/app/tests/test_files/poor_quality.py",
      "line": 1,
      "severity": "FindingSeverity.MEDIUM",
      "category": "complexity",
      "description": "High cognitive complexity: 70 (threshold: 15)",
      "recommendation": "Reduce nesting and simplify control flow"
    },
    {
      "file": "/app/tests/test_files/poor_quality.py",
      "line": 1,
      "severity": "FindingSeverity.MEDIUM",
      "category": "complexity",
      "description": "Deep nesting detected: 11 levels (threshold: 4)",
      "recommendation": "Extract nested logic into separate functions"
    },
    {
      "file": "/app/tests/test_files/poor_quality.py",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Standardize indentation (use 4 spaces consistently)",
      "recommendation": "Standardize indentation (use 4 spaces consistently)"
    },
    {
      "file": "/app/tests/test_files/poor_quality.py",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Reduce nesting complexity by extracting methods or using early returns",
      "recommendation": "Reduce nesting complexity by extracting methods or using early returns"
    },
    {
      "file": "/app/tests/test_files/poor_quality.py",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Add docstrings to functions and classes",
      "recommendation": "Add docstrings to functions and classes"
    },
    {
      "file": "/app/tests/test_files/good_quality.py",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Reduce nesting complexity by extracting methods or using early returns",
      "recommendation": "Reduce nesting complexity by extracting methods or using early returns"
    },
    {
      "file": "/app/tests/test_files/good_quality.py",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Add more inline comments to explain complex logic",
      "recommendation": "Add more inline comments to explain complex logic"
    },
    {
      "file": "/app/tests/test_files/mixed_quality.js",
      "line": 1,
      "severity": "FindingSeverity.MEDIUM",
      "category": "complexity",
      "description": "High cognitive complexity: 118 (threshold: 15)",
      "recommendation": "Reduce nesting and simplify control flow"
    },
    {
      "file": "/app/tests/test_files/mixed_quality.js",
      "line": 1,
      "severity": "FindingSeverity.MEDIUM",
      "category": "complexity",
      "description": "Deep nesting detected: 12 levels (threshold: 4)",
      "recommendation": "Extract nested logic into separate functions"
    },
    {
      "file": "/app/tests/test_files/mixed_quality.js",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Standardize indentation (use 4 spaces consistently)",
      "recommendation": "Standardize indentation (use 4 spaces consistently)"
    },
    {
      "file": "/app/tests/test_files/mixed_quality.js",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Break down 2 long lines (>100 characters)",
      "recommendation": "Break down 2 long lines (>100 characters)"
    },
    {
      "file": "/app/tests/test_files/mixed_quality.js",
      "line": 1,
      "severity": "FindingSeverity.LOW",
      "category": "maintainability",
      "description": "Reduce nesting complexity by extracting methods or using early returns",
      "recommendation": "Reduce nesting complexity by extracting methods or using early returns"
    }
  ],
  "metrics": {
    "/app/tests/test_files/poor_quality.py": {
      "complexity": {
        "cyclomatic_complexity": 1,
        "cognitive_complexity": 70,
        "nesting_depth": 11,
        "function_count": 0,
        "total_lines": 61,
        "code_lines": 46,
        "blank_lines": 8,
        "comment_lines": 7,
        "supported": true,
        "llm_analysis_confidence": 0.8,
        "llm_provider": "ollama",
        "llm_insights_count": 0,
        "llm_recommendations_count": 0
      },
      "duplication": {
        "total_duplications": 0,
        "duplication_percentage": 0.0,
        "clone_type_distribution": {},
        "processing_time": 0.0033049583435058594
      },
      "maintainability": {
        "score": 57.699999999999996,
        "quality_level": "Fair",
        "complexity_score": 0,
        "duplication_score": 0,
        "documentation_score": 0,
        "naming_score": 0,
        "structure_score": 0,
        "test_coverage_score": 0,
        "processing_time": 0
      }
    },
    "/app/tests/test_files/good_quality.py": {
      "duplication": {
        "total_duplications": 0,
        "duplication_percentage": 0.0,
        "clone_type_distribution": {},
        "processing_time": 0.004730939865112305
      },
      "maintainability": {
        "score": 78.9,
        "quality_level": "Good",
        "complexity_score": 0,
        "duplication_score": 0,
        "documentation_score": 0,
        "naming_score": 0,
        "structure_score": 0,
        "test_coverage_score": 0,
        "processing_time": 0
      }
    },
    "/app/tests/test_files/mixed_quality.js": {
      "complexity": {
        "cyclomatic_complexity": 1,
        "cognitive_complexity": 118,
        "nesting_depth": 12,
        "function_count": 0,
        "total_lines": 148,
        "code_lines": 115,
        "blank_lines": 16,
        "comment_lines": 17,
        "supported": true,
        "llm_analysis_confidence": 0.8,
        "llm_provider": "ollama",
        "llm_insights_count": 0,
        "llm_recommendations_count": 0
      },
      "duplication": {
        "total_duplications": 0,
        "duplication_percentage": 0.0,
        "clone_type_distribution": {},
        "processing_time": 0.005856990814208984
      },
      "maintainability": {
        "score": 25.4,
        "quality_level": "Poor",
        "complexity_score": 0,
        "duplication_score": 0,
        "documentation_score": 0,
        "naming_score": 0,
        "structure_score": 0,
        "test_coverage_score": 0,
        "processing_time": 0
      }
    }
  },
  "execution_time": 166.85868048667908,
  "success": true
}