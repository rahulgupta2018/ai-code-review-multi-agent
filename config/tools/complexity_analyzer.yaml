# Tree-sitter Complexity Analyzer Configuration
# Language-specific configuration for AST parsing and complexity analysis

language_config:
  # Python
  '.py':
    parser: 'tree_sitter_python'
    name: 'python'
    function_query: '(function_def name: (identifier) @name)'
    class_query: '(class_definition name: (identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    with_query: '(with_statement)'
    match_query: '(match_statement)'  # Python 3.10+

  # JavaScript
  '.js':
    parser: 'tree_sitter_javascript'
    name: 'javascript'
    function_query: '(function_declaration name: (identifier) @name)'
    class_query: '(class_declaration name: (identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

  # TypeScript
  '.ts':
    parser: 'tree_sitter_typescript'
    name: 'typescript'
    function_query: '(function_declaration name: (identifier) @name)'
    class_query: '(class_declaration name: (identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

  # Java
  '.java':
    parser: 'tree_sitter_java'
    name: 'java'
    function_query: '(method_declaration name: (identifier) @name)'
    class_query: '(class_declaration name: (identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_expression)'

  # Go
  '.go':
    parser: 'tree_sitter_go'
    name: 'go'
    function_query: '(function_declaration name: (identifier) @name)'
    if_query: '(if_statement)'
    for_query: '(for_statement)'
    switch_query: '(expression_switch_statement)'

  # Rust
  '.rs':
    parser: 'tree_sitter_rust'
    name: 'rust'
    function_query: '(function_item name: (identifier) @name)'
    impl_query: '(impl_item)'
    if_query: '(if_expression)'
    while_query: '(while_expression)'
    for_query: '(for_expression)'
    match_query: '(match_expression)'
    loop_query: '(loop_expression)'

  # C++
  '.cpp':
    parser: 'tree_sitter_cpp'
    name: 'cpp'
    function_query: '(function_definition declarator: (function_declarator declarator: (identifier) @name))'
    class_query: '(class_specifier name: (type_identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

  '.cc':
    parser: 'tree_sitter_cpp'
    name: 'cpp'
    function_query: '(function_definition declarator: (function_declarator declarator: (identifier) @name))'
    class_query: '(class_specifier name: (type_identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

  '.cxx':
    parser: 'tree_sitter_cpp'
    name: 'cpp'
    function_query: '(function_definition declarator: (function_declarator declarator: (identifier) @name))'
    class_query: '(class_specifier name: (type_identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

  # C#
  '.cs':
    parser: 'tree_sitter_c_sharp'
    name: 'csharp'
    function_query: '(method_declaration name: (identifier) @name)'
    class_query: '(class_declaration name: (identifier) @name)'
    if_query: '(if_statement)'
    while_query: '(while_statement)'
    for_query: '(for_statement)'
    try_query: '(try_statement)'
    switch_query: '(switch_statement)'

# Complexity thresholds and analysis settings
complexity_thresholds:
  cyclomatic_complexity:
    low: 5
    medium: 10
    high: 20
  
  cognitive_complexity:
    low: 10
    medium: 15
    high: 25
  
  nesting_depth:
    low: 2
    medium: 4
    high: 6
  
  function_length:
    medium: 50
    high: 100

# Parser module mapping (for dynamic imports)
parser_modules:
  tree_sitter_python: 'tree_sitter_python'
  tree_sitter_javascript: 'tree_sitter_javascript'
  tree_sitter_typescript: 'tree_sitter_typescript'
  tree_sitter_java: 'tree_sitter_java'
  tree_sitter_go: 'tree_sitter_go'
  tree_sitter_rust: 'tree_sitter_rust'
  tree_sitter_cpp: 'tree_sitter_cpp'
  tree_sitter_c_sharp: 'tree_sitter_c_sharp'

# Language name to file extension mapping
language_mapping:
  python: '.py'
  javascript: '.js'
  typescript: '.ts'
  java: '.java'
  go: '.go'
  rust: '.rs'
  cpp: '.cpp'
  'c++': '.cpp'
  csharp: '.cs'
  'c#': '.cs'

# File extension to analysis language enum mapping
extension_to_language:
  '.py': 'PYTHON'
  '.js': 'JAVASCRIPT'
  '.ts': 'TYPESCRIPT'
  '.java': 'JAVA'
  '.go': 'GO'
  '.rs': 'RUST'
  '.cpp': 'CPP'
  '.cc': 'CPP'
  '.cxx': 'CPP'
  '.cs': 'CSHARP'