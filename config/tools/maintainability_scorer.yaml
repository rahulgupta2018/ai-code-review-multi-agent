# Maintainability Scorer Configuration
# Configuration for holistic code quality scoring

# Language detection from file extensions
language_detection:
  '.py': 'python'
  '.js': 'javascript'
  '.jsx': 'javascript'
  '.ts': 'typescript'
  '.tsx': 'typescript'
  '.java': 'java'
  '.go': 'go'
  '.rs': 'rust'
  '.cpp': 'cpp'
  '.cxx': 'cpp'
  '.cc': 'cpp'
  '.c++': 'cpp'
  '.hpp': 'cpp'
  '.hxx': 'cpp'
  '.h++': 'cpp'
  '.cs': 'csharp'

# Regex patterns for code analysis
regex_patterns:
  # Function definition patterns by language
  function_patterns:
    python: 'def\s+(\w+)\s*\([^)]*\):[^:]*(?:\n(?:    .*|\s*))*'
    javascript: 'function\s+(\w+)\s*\([^)]*\)\s*{[^}]*}'
    typescript: 'function\s+(\w+)\s*\([^)]*\)\s*{[^}]*}'
    java: '(?:public|private|protected)?\s*(?:static)?\s*\w+\s+(\w+)\s*\([^)]*\)\s*{[^}]*}'
    go: 'func\s+(\w+)\s*\([^)]*\)\s*[^{]*{[^}]*}'
    rust: 'fn\s+(\w+)\s*\([^)]*\)\s*[^{]*{[^}]*}'
    cpp: '(?:\w+\s+)?(\w+)\s*\([^)]*\)\s*{[^}]*}'
    csharp: '(?:public|private|protected)?\s*(?:static)?\s*\w+\s+(\w+)\s*\([^)]*\)\s*{[^}]*}'
  
  # Class definition patterns by language
  class_patterns:
    python: 'class\s+(\w+)(?:\([^)]*\))?:[^:]*(?:\n(?:    .*|\s*))*'
    javascript: 'class\s+(\w+)(?:\s+extends\s+\w+)?\s*{[^}]*}'
    typescript: 'class\s+(\w+)(?:\s+extends\s+\w+)?(?:\s+implements\s+[\w,\s]+)?\s*{[^}]*}'
    java: '(?:public|private|protected)?\s*class\s+(\w+)(?:\s+extends\s+\w+)?(?:\s+implements\s+[\w,\s]+)?\s*{[^}]*}'
    go: 'type\s+(\w+)\s+struct\s*{[^}]*}'
    rust: '(?:pub\s+)?struct\s+(\w+)(?:<[^>]*>)?\s*{[^}]*}'
    cpp: 'class\s+(\w+)(?:\s*:\s*(?:public|private|protected)\s+\w+)?\s*{[^}]*}'
    csharp: '(?:public|private|protected)?\s*class\s+(\w+)(?:\s*:\s*\w+)?\s*{[^}]*}'
  
  # Function name extraction patterns
  function_name_patterns:
    python: 'def\s+(\w+)'
    javascript: 'function\s+(\w+)'
    typescript: 'function\s+(\w+)'
    java: '\w+\s+(\w+)\s*\('
    go: 'func\s+(\w+)'
    rust: 'fn\s+(\w+)'
    cpp: '(\w+)\s*\('
    csharp: '\w+\s+(\w+)\s*\('
  
  # Class name extraction patterns
  class_name_patterns:
    python: 'class\s+(\w+)'
    javascript: 'class\s+(\w+)'
    typescript: 'class\s+(\w+)'
    java: 'class\s+(\w+)'
    go: 'type\s+(\w+)'
    rust: 'struct\s+(\w+)'
    cpp: 'class\s+(\w+)'
    csharp: 'class\s+(\w+)'
  
  # Documentation patterns by language
  docstring_patterns:
    python: ['""".*?"""', "'''.*?'''"]
    javascript: ['/\*\*.*?\*/']
    typescript: ['/\*\*.*?\*/']
    java: ['/\*\*.*?\*/']
    go: ['/\*.*?\*/']
    rust: ['/\*.*?\*/']
    cpp: ['/\*.*?\*/']
    csharp: ['/\*\*.*?\*/']
  
  # Comment patterns (generic)
  comment_patterns:
    single_line: ['#.*', '//.*']
    multi_line: ['/\*.*?\*/']
  
  # Variable assignment patterns
  variable_patterns:
    assignment: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*='
  
  # Documentation quality indicators
  documentation_quality_patterns:
    parameters: '@param|:param|@parameter'
    returns: '@return|:return|@returns'
    raises: '@raises|:raises|@throws'
    examples: 'example|>>> '
  
  # Naming convention patterns
  naming_style_patterns:
    snake_case: '^[a-z][a-z0-9_]*$'
    camelCase: '^[a-z][a-zA-Z0-9]*$'
    PascalCase: '^[A-Z][a-zA-Z0-9]*$'
    UPPER_CASE: '^[A-Z][A-Z0-9_]*$'

# Complexity scoring thresholds combining multiple metrics

# Language detection from file extensions
language_detection:
  '.py': 'python'
  '.js': 'javascript'
  '.jsx': 'javascript'
  '.ts': 'typescript'
  '.tsx': 'typescript'
  '.java': 'java'
  '.go': 'go'
  '.rs': 'rust'
  '.cpp': 'cpp'
  '.cxx': 'cpp'
  '.cc': 'cpp'
  '.c++': 'cpp'
  '.hpp': 'cpp'
  '.hxx': 'cpp'
  '.h++': 'cpp'
  '.cs': 'csharp'

# Maintainability Index calculation weights
maintainability_weights:
  complexity_weight: 0.25      # Weight for complexity metrics
  duplication_weight: 0.20     # Weight for code duplication
  documentation_weight: 0.15   # Weight for documentation coverage
  naming_weight: 0.15          # Weight for naming conventions
  structure_weight: 0.15       # Weight for code structure
  test_coverage_weight: 0.10   # Weight for test coverage

# Scoring thresholds for different quality levels
quality_thresholds:
  excellent: 85    # 85+ = Excellent maintainability
  good: 70        # 70-84 = Good maintainability
  fair: 50        # 50-69 = Fair maintainability
  poor: 30        # 30-49 = Poor maintainability
  critical: 0     # 0-29 = Critical maintainability issues

# Complexity scoring configuration
complexity_scoring:
  cyclomatic_thresholds:
    excellent: 5     # <= 5 cyclomatic complexity
    good: 10        # 6-10 cyclomatic complexity
    fair: 15        # 11-15 cyclomatic complexity
    poor: 20        # 16-20 cyclomatic complexity
    critical: 21    # > 20 cyclomatic complexity
  
  cognitive_thresholds:
    excellent: 7     # <= 7 cognitive complexity
    good: 15        # 8-15 cognitive complexity
    fair: 25        # 16-25 cognitive complexity
    poor: 35        # 26-35 cognitive complexity
    critical: 36    # > 35 cognitive complexity
  
  nesting_thresholds:
    excellent: 3     # <= 3 nesting levels
    good: 4         # 4 nesting levels
    fair: 5         # 5 nesting levels
    poor: 6         # 6 nesting levels
    critical: 7     # > 6 nesting levels

# Duplication scoring configuration
duplication_scoring:
  percentage_thresholds:
    excellent: 3     # <= 3% duplication
    good: 8         # 4-8% duplication
    fair: 15        # 9-15% duplication
    poor: 25        # 16-25% duplication
    critical: 26    # > 25% duplication
  
  clone_type_penalties:
    "Type 1 (Exact)": 10        # Severe penalty for exact clones
    "Type 2 (Parameterized)": 7 # High penalty for parameterized clones
    "Type 3 (Near-miss)": 4     # Medium penalty for near-miss clones
    "Type 4 (Semantic)": 2      # Low penalty for semantic clones

# Documentation scoring configuration
documentation_scoring:
  coverage_thresholds:
    excellent: 90    # >= 90% documentation coverage
    good: 75        # 75-89% documentation coverage
    fair: 50        # 50-74% documentation coverage
    poor: 25        # 25-49% documentation coverage
    critical: 0     # < 25% documentation coverage
  
  required_elements:
    - module_docstring
    - function_docstrings
    - class_docstrings
    - inline_comments
  
  quality_indicators:
    - contains_examples
    - contains_parameters
    - contains_return_info
    - contains_raises_info

# Naming convention scoring
naming_scoring:
  convention_checks:
    python:
      functions: "snake_case"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "snake_case"
    javascript:
      functions: "camelCase"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "camelCase"
    typescript:
      functions: "camelCase"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "camelCase"
    java:
      functions: "camelCase"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "camelCase"
    go:
      functions: "camelCase"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "camelCase"
    rust:
      functions: "snake_case"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "snake_case"
    cpp:
      functions: "snake_case"
      classes: "PascalCase"
      constants: "UPPER_CASE"
      variables: "snake_case"
    csharp:
      functions: "PascalCase"
      classes: "PascalCase"
      constants: "PascalCase"
      variables: "camelCase"
  
  naming_quality_thresholds:
    excellent: 95    # >= 95% naming compliance
    good: 85        # 85-94% naming compliance
    fair: 70        # 70-84% naming compliance
    poor: 50        # 50-69% naming compliance
    critical: 0     # < 50% naming compliance

# Code structure scoring
structure_scoring:
  file_size_thresholds:
    excellent: 200   # <= 200 lines per file
    good: 400       # 201-400 lines per file
    fair: 600       # 401-600 lines per file
    poor: 800       # 601-800 lines per file
    critical: 801   # > 800 lines per file
  
  function_size_thresholds:
    excellent: 20    # <= 20 lines per function
    good: 40        # 21-40 lines per function
    fair: 60        # 41-60 lines per function
    poor: 80        # 61-80 lines per function
    critical: 81    # > 80 lines per function
  
  class_size_thresholds:
    excellent: 200   # <= 200 lines per class
    good: 400       # 201-400 lines per class
    fair: 600       # 401-600 lines per class
    poor: 800       # 601-800 lines per class
    critical: 801   # > 800 lines per class

# Test coverage estimation (basic heuristics)
test_coverage_scoring:
  coverage_thresholds:
    excellent: 90    # >= 90% estimated coverage
    good: 80        # 80-89% estimated coverage
    fair: 70        # 70-79% estimated coverage
    poor: 60        # 60-69% estimated coverage
    critical: 0     # < 60% estimated coverage
  
  test_indicators:
    - test_files_present
    - test_function_ratio
    - assertion_patterns
    - mock_usage
  
  test_file_patterns:
    - "*test*.py"
    - "*_test.py"
    - "test_*.py"
    - "*.spec.js"
    - "*.test.js"
    - "*Test.java"
    - "*_test.go"
    - "*_test.rs"
    - "*Test.cs"

# Advanced scoring configuration
advanced_settings:
  # Enable detailed metric breakdown
  detailed_scoring: true
  
  # Include recommendations based on scores
  include_recommendations: true
  
  # Minimum file size to analyze (lines)
  min_file_size: 10
  
  # Weight adjustments for different project types
  project_type_adjustments:
    library: 
      documentation_weight: 0.25  # Higher docs weight for libraries
      test_coverage_weight: 0.15  # Higher test weight for libraries
    application:
      structure_weight: 0.20      # Higher structure weight for apps
      complexity_weight: 0.20     # Higher complexity weight for apps
    script:
      documentation_weight: 0.10  # Lower docs weight for scripts
      structure_weight: 0.10      # Lower structure weight for scripts

# Output formatting preferences
output_preferences:
  # Include detailed metric breakdown
  include_metric_details: true
  
  # Include improvement suggestions
  include_suggestions: true
  
  # Include historical comparison (if available)
  include_trends: false
  
  # Sort suggestions by impact
  sort_suggestions_by_impact: true
  
  # Include confidence scores
  include_confidence_scores: true