# Simplified Dockerfile for AI Code Review Multi-Agent System Development
# Focused on fast development cycles

FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.6.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    gcc \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==$POETRY_VERSION
ENV PATH="$POETRY_HOME/bin:$PATH"

# Development stage with additional tools
FROM base AS development

# Install development tools
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    htop \
    tree \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Set working directory
WORKDIR /app

# Copy dependency files and README (needed by pyproject.toml)
COPY pyproject.toml poetry.lock* README.md ./

# Copy source code (needed for package installation)
COPY src/ ./src/

# Create config directory and copy if exists
RUN mkdir -p ./config
COPY config ./config

# Configure Poetry and install dependencies
RUN poetry config virtualenvs.create false && \
    poetry install --only main

# Copy infrastructure directory (scripts, configs, etc.)
COPY infra/ ./infra/
RUN chmod +x ./infra/scripts/*.sh ./infra/scripts/*.py 2>/dev/null || true

# Create required directories
RUN mkdir -p /app/logs /app/outputs /app/data /app/credentials /app/adk-workspace && \
    chown -R appuser:appuser /app

# Copy startup script
COPY infra/scripts/start-adk-dev.sh /usr/local/bin/start-adk-dev.sh
RUN chmod +x /usr/local/bin/start-adk-dev.sh

# Set ADK environment variables
ENV ADK_WORKSPACE=/app/adk-workspace \
    ADK_DEV_PORTAL_PORT=8200 \
    ADK_LOG_LEVEL=INFO

# Expose ports
EXPOSE 8000 8200

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command for development
CMD ["/usr/local/bin/start-adk-dev.sh"]